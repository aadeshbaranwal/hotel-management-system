{"ast":null,"code":"// import React from 'react';\n// import PropTypes from 'prop-types';\n// import clsx from 'clsx';\n// import { withStyles } from '@material-ui/core/styles';\n// import TableCell from '@material-ui/core/TableCell';\n// import Paper from '@material-ui/core/Paper';\n// import { AutoSizer, Column, Table } from 'react-virtualized';\n// const styles = (theme) => ({\n//   flexContainer: {\n//     display: 'flex',\n//     alignItems: 'center',\n//     boxSizing: 'border-box',\n//   },\n//   table: {\n//     // temporary right-to-left patch, waiting for\n//     // https://github.com/bvaughn/react-virtualized/issues/454\n//     '& .ReactVirtualized__Table__headerRow': {\n//       flip: false,\n//       paddingRight: theme.direction === 'rtl' ? '0 !important' : undefined,\n//     },\n//   },\n//   tableRow: {\n//     cursor: 'pointer',\n//   },\n//   tableRowHover: {\n//     '&:hover': {\n//       backgroundColor: theme.palette.grey[200],\n//     },\n//   },\n//   tableCell: {\n//     flex: 1,\n//   },\n//   noClick: {\n//     cursor: 'initial',\n//   },\n// });\n// class MuiVirtualizedTable extends React.PureComponent {\n//   static defaultProps = {\n//     headerHeight: 48,\n//     rowHeight: 48,\n//   };\n//   getRowClassName = ({ index }) => {\n//     const { classes, onRowClick } = this.props;\n//     return clsx(classes.tableRow, classes.flexContainer, {\n//       [classes.tableRowHover]: index !== -1 && onRowClick != null,\n//     });\n//   };\n//   cellRenderer = ({ cellData, columnIndex }) => {\n//     const { columns, classes, rowHeight, onRowClick } = this.props;\n//     return (\n//       <TableCell\n//         component=\"div\"\n//         className={clsx(classes.tableCell, classes.flexContainer, {\n//           [classes.noClick]: onRowClick == null,\n//         })}\n//         variant=\"body\"\n//         style={{ height: rowHeight }}\n//         align={(columnIndex != null && columns[columnIndex].numeric) || false ? 'right' : 'left'}\n//       >\n//         {cellData}\n//       </TableCell>\n//     );\n//   };\n//   headerRenderer = ({ label, columnIndex }) => {\n//     const { headerHeight, columns, classes } = this.props;\n//     return (\n//       <TableCell\n//         component=\"div\"\n//         className={clsx(classes.tableCell, classes.flexContainer, classes.noClick)}\n//         variant=\"head\"\n//         style={{ height: headerHeight }}\n//         align={columns[columnIndex].numeric || false ? 'right' : 'left'}\n//       >\n//         <span>{label}</span>\n//       </TableCell>\n//     );\n//   };\n//   render() {\n//     const { classes, columns, rowHeight, headerHeight, ...tableProps } = this.props;\n//     return (\n//       <AutoSizer>\n//         {({ height, width }) => (\n//           <Table\n//             height={height}\n//             width={width}\n//             rowHeight={rowHeight}\n//             gridStyle={{\n//               direction: 'inherit',\n//             }}\n//             headerHeight={headerHeight}\n//             className={classes.table}\n//             {...tableProps}\n//             rowClassName={this.getRowClassName}\n//           >\n//             {columns.map(({ dataKey, ...other }, index) => {\n//               return (\n//                 <Column\n//                   key={dataKey}\n//                   headerRenderer={(headerProps) =>\n//                     this.headerRenderer({\n//                       ...headerProps,\n//                       columnIndex: index,\n//                     })\n//                   }\n//                   className={classes.flexContainer}\n//                   cellRenderer={this.cellRenderer}\n//                   dataKey={dataKey}\n//                   {...other}\n//                 />\n//               );\n//             })}\n//           </Table>\n//         )}\n//       </AutoSizer>\n//     );\n//   }\n// }\n// MuiVirtualizedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   columns: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       dataKey: PropTypes.string.isRequired,\n//       label: PropTypes.string.isRequired,\n//       numeric: PropTypes.bool,\n//       width: PropTypes.number.isRequired,\n//     }),\n//   ).isRequired,\n//   headerHeight: PropTypes.number,\n//   onRowClick: PropTypes.func,\n//   rowHeight: PropTypes.number,\n// };\n// const VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\n// // ---\n// const sample = [\n//   ['Frozen yoghurt', 159, 6.0, 24, 4.0],\n//   ['Ice cream sandwich', 237, 9.0, 37, 4.3],\n//   ['Eclair', 262, 16.0, 24, 6.0],\n//   ['Cupcake', 305, 3.7, 67, 4.3],\n//   ['Gingerbread', 356, 16.0, 49, 3.9],\n// ];\n// function createData(id, dessert, calories, fat, carbs, protein) {\n//   return { id, dessert, calories, fat, carbs, protein };\n// }\n// const rows = [];\n// for (let i = 0; i < 200; i += 1) {\n//   const randomSelection = sample[Math.floor(Math.random() * sample.length)];\n//   rows.push(createData(i, ...randomSelection));\n// }\n// export default function GenerateReport() {\n//   return (\n//     <Paper style={{ height: 400, width: '100%' }}>\n//       <VirtualizedTable\n//         rowCount={rows.length}\n//         rowGetter={({ index }) => rows[index]}\n//         columns={[\n//           {\n//             width: 200,\n//             label: 'Dessert',\n//             dataKey: 'dessert',\n//           },\n//           {\n//             width: 120,\n//             label: 'Calories\\u00A0(g)',\n//             dataKey: 'calories',\n//             numeric: true,\n//           },\n//           {\n//             width: 120,\n//             label: 'Fat\\u00A0(g)',\n//             dataKey: 'fat',\n//             numeric: true,\n//           },\n//           {\n//             width: 120,\n//             label: 'Carbs\\u00A0(g)',\n//             dataKey: 'carbs',\n//             numeric: true,\n//           },\n//           {\n//             width: 120,\n//             label: 'Protein\\u00A0(g)',\n//             dataKey: 'protein',\n//             numeric: true,\n//           },\n//         ]}\n//       />\n//     </Paper>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/pc/Desktop/project/oxotel-au3/oxotel/src/components/GenerateReport.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import clsx from 'clsx';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import TableCell from '@material-ui/core/TableCell';\r\n// import Paper from '@material-ui/core/Paper';\r\n// import { AutoSizer, Column, Table } from 'react-virtualized';\r\n\r\n// const styles = (theme) => ({\r\n//   flexContainer: {\r\n//     display: 'flex',\r\n//     alignItems: 'center',\r\n//     boxSizing: 'border-box',\r\n//   },\r\n//   table: {\r\n//     // temporary right-to-left patch, waiting for\r\n//     // https://github.com/bvaughn/react-virtualized/issues/454\r\n//     '& .ReactVirtualized__Table__headerRow': {\r\n//       flip: false,\r\n//       paddingRight: theme.direction === 'rtl' ? '0 !important' : undefined,\r\n//     },\r\n//   },\r\n//   tableRow: {\r\n//     cursor: 'pointer',\r\n//   },\r\n//   tableRowHover: {\r\n//     '&:hover': {\r\n//       backgroundColor: theme.palette.grey[200],\r\n//     },\r\n//   },\r\n//   tableCell: {\r\n//     flex: 1,\r\n//   },\r\n//   noClick: {\r\n//     cursor: 'initial',\r\n//   },\r\n// });\r\n\r\n// class MuiVirtualizedTable extends React.PureComponent {\r\n//   static defaultProps = {\r\n//     headerHeight: 48,\r\n//     rowHeight: 48,\r\n//   };\r\n\r\n//   getRowClassName = ({ index }) => {\r\n//     const { classes, onRowClick } = this.props;\r\n\r\n//     return clsx(classes.tableRow, classes.flexContainer, {\r\n//       [classes.tableRowHover]: index !== -1 && onRowClick != null,\r\n//     });\r\n//   };\r\n\r\n//   cellRenderer = ({ cellData, columnIndex }) => {\r\n//     const { columns, classes, rowHeight, onRowClick } = this.props;\r\n//     return (\r\n//       <TableCell\r\n//         component=\"div\"\r\n//         className={clsx(classes.tableCell, classes.flexContainer, {\r\n//           [classes.noClick]: onRowClick == null,\r\n//         })}\r\n//         variant=\"body\"\r\n//         style={{ height: rowHeight }}\r\n//         align={(columnIndex != null && columns[columnIndex].numeric) || false ? 'right' : 'left'}\r\n//       >\r\n//         {cellData}\r\n//       </TableCell>\r\n//     );\r\n//   };\r\n\r\n//   headerRenderer = ({ label, columnIndex }) => {\r\n//     const { headerHeight, columns, classes } = this.props;\r\n\r\n//     return (\r\n//       <TableCell\r\n//         component=\"div\"\r\n//         className={clsx(classes.tableCell, classes.flexContainer, classes.noClick)}\r\n//         variant=\"head\"\r\n//         style={{ height: headerHeight }}\r\n//         align={columns[columnIndex].numeric || false ? 'right' : 'left'}\r\n//       >\r\n//         <span>{label}</span>\r\n//       </TableCell>\r\n//     );\r\n//   };\r\n\r\n//   render() {\r\n//     const { classes, columns, rowHeight, headerHeight, ...tableProps } = this.props;\r\n//     return (\r\n//       <AutoSizer>\r\n//         {({ height, width }) => (\r\n//           <Table\r\n//             height={height}\r\n//             width={width}\r\n//             rowHeight={rowHeight}\r\n//             gridStyle={{\r\n//               direction: 'inherit',\r\n//             }}\r\n//             headerHeight={headerHeight}\r\n//             className={classes.table}\r\n//             {...tableProps}\r\n//             rowClassName={this.getRowClassName}\r\n//           >\r\n//             {columns.map(({ dataKey, ...other }, index) => {\r\n//               return (\r\n//                 <Column\r\n//                   key={dataKey}\r\n//                   headerRenderer={(headerProps) =>\r\n//                     this.headerRenderer({\r\n//                       ...headerProps,\r\n//                       columnIndex: index,\r\n//                     })\r\n//                   }\r\n//                   className={classes.flexContainer}\r\n//                   cellRenderer={this.cellRenderer}\r\n//                   dataKey={dataKey}\r\n//                   {...other}\r\n//                 />\r\n//               );\r\n//             })}\r\n//           </Table>\r\n//         )}\r\n//       </AutoSizer>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// MuiVirtualizedTable.propTypes = {\r\n//   classes: PropTypes.object.isRequired,\r\n//   columns: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       dataKey: PropTypes.string.isRequired,\r\n//       label: PropTypes.string.isRequired,\r\n//       numeric: PropTypes.bool,\r\n//       width: PropTypes.number.isRequired,\r\n//     }),\r\n//   ).isRequired,\r\n//   headerHeight: PropTypes.number,\r\n//   onRowClick: PropTypes.func,\r\n//   rowHeight: PropTypes.number,\r\n// };\r\n\r\n// const VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\r\n\r\n// // ---\r\n\r\n// const sample = [\r\n//   ['Frozen yoghurt', 159, 6.0, 24, 4.0],\r\n//   ['Ice cream sandwich', 237, 9.0, 37, 4.3],\r\n//   ['Eclair', 262, 16.0, 24, 6.0],\r\n//   ['Cupcake', 305, 3.7, 67, 4.3],\r\n//   ['Gingerbread', 356, 16.0, 49, 3.9],\r\n// ];\r\n\r\n// function createData(id, dessert, calories, fat, carbs, protein) {\r\n//   return { id, dessert, calories, fat, carbs, protein };\r\n// }\r\n\r\n// const rows = [];\r\n\r\n// for (let i = 0; i < 200; i += 1) {\r\n//   const randomSelection = sample[Math.floor(Math.random() * sample.length)];\r\n//   rows.push(createData(i, ...randomSelection));\r\n// }\r\n\r\n// export default function GenerateReport() {\r\n//   return (\r\n//     <Paper style={{ height: 400, width: '100%' }}>\r\n//       <VirtualizedTable\r\n//         rowCount={rows.length}\r\n//         rowGetter={({ index }) => rows[index]}\r\n//         columns={[\r\n//           {\r\n//             width: 200,\r\n//             label: 'Dessert',\r\n//             dataKey: 'dessert',\r\n//           },\r\n//           {\r\n//             width: 120,\r\n//             label: 'Calories\\u00A0(g)',\r\n//             dataKey: 'calories',\r\n//             numeric: true,\r\n//           },\r\n//           {\r\n//             width: 120,\r\n//             label: 'Fat\\u00A0(g)',\r\n//             dataKey: 'fat',\r\n//             numeric: true,\r\n//           },\r\n//           {\r\n//             width: 120,\r\n//             label: 'Carbs\\u00A0(g)',\r\n//             dataKey: 'carbs',\r\n//             numeric: true,\r\n//           },\r\n//           {\r\n//             width: 120,\r\n//             label: 'Protein\\u00A0(g)',\r\n//             dataKey: 'protein',\r\n//             numeric: true,\r\n//           },\r\n//         ]}\r\n//       />\r\n//     </Paper>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}